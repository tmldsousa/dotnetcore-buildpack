#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-16" ]; then
	echo "Need heroku-16 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir $ENV_DIR

echo "Installing the dependencies"
apt_install libunwind8 gettext

echo "Installing dotnet"
install_dotnet $BUILD_DIR 

echo "Installing node"
install_node $BUILD_DIR 

export PATH="/app/dotnet:${PATH}"
export PATH="/app/node:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
dotnet --info

if [ -n "$PROJECT" ]; then
	PROJECT_FILE=${BUILD_DIR}/${PROJECT}
	PROJECT_FILENAME=${PROJECT_FILE##*/}
	PROJECT_NAME=${PROJECT_FILENAME%.[^.]*}
	echo "Project file configured in PROJECT environment variable"
else
	PROJECT_NAME=$(basename $(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)))
	PROJECT_FILE=$(find ${BUILD_DIR} -maxdepth 5 -iname "${PROJECT_NAME}.csproj" | head -1)
fi

echo "restore ${PROJECT_FILE}"
dotnet restore $PROJECT_FILE

echo "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration Release

cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./${PROJECT_NAME}.dll" --server.urls http://+:\$PORT
EOT
